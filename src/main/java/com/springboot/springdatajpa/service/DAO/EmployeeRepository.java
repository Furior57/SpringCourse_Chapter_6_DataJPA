package com.springboot.springdatajpa.service.DAO;



import com.springboot.springdatajpa.entity.Employee;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
// Первое, что мы сделаем, это переименуем интерфейс, согласно конвенции и будем расширять
// интерфейс JpaRepository. Далее необходимо прописать дженерики для JpaRepository.
// Первым идет entity с которым мы будем работать, вторым тип его поля id.
// Теперь самое вкусное. Мы удаляем все методы, нам не нужна реализация этого интерфейса,
// за нас всем будет заниматься Spring. Теперь перейдем в сервис EmployeeServiceImpl.

public interface EmployeeRepository extends JpaRepository<Employee, Integer> {
    // Может случиться такое, что предоставленных CRUD методов нам недостаточно.
    // Например, мы хотим получить список работников по определенному признаку.
    // И тут в дело вступает тот конструктор, который мы упоминали ранее.
    // Допустим мы хотим получить всех работников по имени.
    // Начинаем написание метода с CRUD операции, которой хотим воспользоваться, а
    // далее Spring сам предложит варианты. Здесь мы хотим найти всех работников
    // с определенным именем. Очень важно в этот момент правильно писать параметры,
    // если мы ищем по имени, то параметром передаем строку. А самое замечательное,
    // что реализовывать этот метод нам уже не нужно, все сделает Spring.
    // Нам просто нужно в сервисе его вызвать. Можно перейти туда и посмотреть, он будет внизу,
    // можно просто догадаться, что будет там написано. А вот в контроллере неочевидная запись.
    // Перейдем туда на 48 строку.
    public List<Employee> findAllByName(String name);

}
